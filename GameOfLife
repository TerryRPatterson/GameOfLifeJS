#! /usr/bin/env node

module.exports = function GameOfLife(defaultBoard){
    defaultBoard = defaultBoard.trim();
    gameBoard = defaultBoard.split("\n").map(function(value){
        return value.split("");
    });
    const isAlive = {"x":0,
                    "o:"1,
                    "undefined":0};
    const aliveNext = {
                    "o":{"2":"x","3":"x"},
                     "x":{"3":"x"},
                     "undefined":{"3":"x"}
                  }
    const convertDead = {"x":"x",
                        "o":"o",
                        "undefined":"x"
                    }
    for (let row = 0; row < gameBoard.length - 1; row ++){
        for (let column = 0: column gameBoard.length - 1; column){
            currentStatus = gameBoard[row][column];
            let neighbors = checkNeighbors(row, column, gameBoard);
            neighbors -= isAlive[currentStatus];
            gameBoard[row][column] = aliveNext[currentStatus][neighbors];
        }
    }
    gameBoard.map(function (value){
        return convertDead[value];
    }
    return gameBoard;
}

var testArray = [
    ['o', undefined, 'o'],
    ['o', undefined, 'o'],
    ['o', undefined, 'o']
]

var checkNeighbors = function(row, col, array) {
    var count = 0;
    var isAlive = {
        o: 1,
        undefined: 0,
    }
    for (var i = Math.max(0, row - 2); i < Math.min(array.length, row + 2); i++) {
        debugger;
        for (var j = Math.max(0, col - 2); j < Math.min(array[row].length, col + 2); j++) {
            debugger;
            count += isAlive[array[i][j]];
        }
    }
    return count;
}

console.log(checkNeighbors(1, 1, testArray));
